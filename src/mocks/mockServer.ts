/**
 * This file is AUTO GENERATED by [msw-auto-mock](https://github.com/zoubingwu/msw-auto-mock)
 * Feel free to commit/edit it as you need.
 */
/* eslint-disable */
/* tslint:disable */
import { HttpResponse, http } from 'msw';
import { faker } from '@faker-js/faker';
import { setupServer } from 'msw/node';
import { endpointProductSearchApi } from '../utils/constants';

faker.seed(1);

const MAX_ARRAY_LENGTH = 20;

let i = 0;
const next = () => {
  if (i === Number.MAX_SAFE_INTEGER - 1) {
    i = 0;
  }
  return i++;
};

export const handlers = [
  http.get(endpointProductSearchApi, () => {
    const resultArray = [[getProductCategorySearchApi200Response(), { status: 200 }]];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
];

export function getProductCategorySearchApi200Response() {
  return {
    autoCorrectQuery: faker.lorem.slug(1),
    category_map: {},
    did_you_mean: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(
      (_) => faker.lorem.slug(1),
    ),
    facet_counts: {
      facet_fields: {
        category: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(
          (_) => ({
            cat_id: faker.lorem.slug(1),
            cat_name: faker.person.fullName(),
            count: faker.number.int({ min: undefined, max: undefined }),
            crumb: faker.lorem.slug(1),
            parent: faker.lorem.slug(1),
            tree_path: faker.lorem.slug(1),
          }),
        ),
      },
      facet_queries: {},
      facet_ranges: {
        price: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(
          (_) => ({
            count: faker.number.int({ min: undefined, max: undefined }),
            end: faker.number.int({ min: undefined, max: undefined }),
            start: faker.number.int({ min: undefined, max: undefined }),
          }),
        ),
      },
    },
    group_response: [...new Array(5).keys()]
      .map((_) => ({
        [faker.lorem.word()]: {
          groups: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(
            (_) => ({
              doclist: {
                docs: [
                  ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
                ].map((_) => ({
                  brand: faker.lorem.slug(1),
                  description: faker.lorem.slug(1),
                  pid: faker.lorem.slug(1),
                  price: faker.number.int({ min: undefined, max: undefined }),
                  price_range: [
                    ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
                  ].map((_) => faker.number.int({ min: undefined, max: undefined })),
                  promotions: [
                    ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
                  ].map((_) => faker.lorem.slug(1)),
                  sale_price: faker.number.int({
                    min: undefined,
                    max: undefined,
                  }),
                  sale_price_range: [
                    ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
                  ].map((_) => faker.number.int({ min: undefined, max: undefined })),
                  score: faker.number.int({ min: undefined, max: undefined }),
                  thumb_image: faker.lorem.slug(1),
                  title: faker.lorem.slug(1),
                  url: faker.internet.url(),
                  variants: [
                    ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
                  ].map((_) => ({
                    sku_color_group: faker.lorem.slug(1),
                    sku_price: faker.number.int({
                      min: undefined,
                      max: undefined,
                    }),
                    sku_sale_price: faker.number.int({
                      min: undefined,
                      max: undefined,
                    }),
                    sku_swatch_images: [
                      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
                    ].map((_) => faker.lorem.slug(1)),
                    sku_thumb_images: [
                      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
                    ].map((_) => faker.lorem.slug(1)),
                    skuid: faker.lorem.slug(1),
                  })),
                })),
                maxScore: faker.number.int({ min: undefined, max: undefined }),
                numFound: faker.number.int({ min: undefined, max: undefined }),
                start: faker.number.int({ min: undefined, max: undefined }),
              },
              groupValue: faker.lorem.slug(1),
            }),
          ),
          matches: faker.number.int({ min: undefined, max: undefined }),
        },
      }))
      .reduce((acc, next) => Object.assign(acc, next), {}),
    keywordRedirect: {
      'original query': faker.lorem.slug(1),
      'redirected query': faker.lorem.slug(1),
      'redirected url': faker.internet.url(),
    },
    response: {
      docs: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map((_) => ({
        brand: faker.lorem.slug(1),
        description: faker.lorem.slug(1),
        pid: faker.lorem.slug(1),
        price: faker.number.int({ min: undefined, max: undefined }),
        price_range: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(
          (_) => faker.number.int({ min: undefined, max: undefined }),
        ),
        promotions: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(
          (_) => faker.lorem.slug(1),
        ),
        sale_price: faker.number.int({ min: undefined, max: undefined }),
        sale_price_range: [
          ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
        ].map((_) => faker.number.int({ min: undefined, max: undefined })),
        score: faker.number.int({ min: undefined, max: undefined }),
        thumb_image: faker.lorem.slug(1),
        title: faker.lorem.slug(1),
        url: faker.internet.url(),
        variants: [...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys()].map(
          (_) => ({
            sku_color_group: faker.lorem.slug(1),
            sku_price: faker.number.int({ min: undefined, max: undefined }),
            sku_sale_price: faker.number.int({ min: undefined, max: undefined }),
            sku_swatch_images: [
              ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
            ].map((_) => faker.lorem.slug(1)),
            sku_thumb_images: [
              ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
            ].map((_) => faker.lorem.slug(1)),
            skuid: faker.lorem.slug(1),
          }),
        ),
      })),
      maxScore: faker.number.int({ min: undefined, max: undefined }),
      numFound: faker.number.int({ min: undefined, max: undefined }),
      start: faker.number.int({ min: undefined, max: undefined }),
    },
    stats: {
      stats_fields: {
        price: {
          max: faker.number.int({ min: undefined, max: undefined }),
          min: faker.number.int({ min: undefined, max: undefined }),
        },
        sale_price: {
          max: faker.number.int({ min: undefined, max: undefined }),
          min: faker.number.int({ min: undefined, max: undefined }),
        },
      },
    },
  };
}

// This configures a Service Worker with the given request handlers.
export const startWorker = () => {
  const server = setupServer(...handlers);
  server.listen();
  return server;
};
